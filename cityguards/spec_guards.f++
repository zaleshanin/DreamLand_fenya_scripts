.apply(function(){
    /*
    скрипт вешается на всех мобов имеющих spec_guard и спецгвардов Правителей 
    v.2
    */
    var initiator; 
    initiator = this;
    //проверка наличия используемых функций
    if(.tmp.quest==null 
        || .tmp.quest.sleep==null
        || .tmp.quest.say==null
        || .tmp.quest.tell==null)
        throw(".tmp.quest functions not found!!!");

    if(.tmp.cityguards == null)
        .tmp.cityguards = .Map();

    this = .tmp.cityguards;

    TalkTask = function(mob, ch) {
        this = .Map();

        this.mob = mob;
		this.ch = ch;
		
		thread = .scheduler.Thread(function(this) {
			try {
                run();
			} catch (e) {
                if(e == "sleep: ch left the room" || e == "sleep: someone is dead") {
                    // персонаж ушел, или кто-то скончался - это норма!
                    .print("cityguard.TalkTask normal: " + e);
                } else {
                    .print("cityguard.TalkTask: " + e);
                }
                cleanup();
                debug(e);
			}
			//cleanup();
		}, this);

        thread.name = .fmt("%s:%C1 talk %C1",ch.in_room.areaname,mob,ch);

        run = function() {
            say("Я Вас знаю?",1);
            if(ch.hometown.areaname==mob.in_room.areaname) {
                say("Ну ладно, мой друг. Я попытаюсь вспомнить.",1);
                social_vict("smile",0);
            } else {
                say("Я не знаю тебя. Уходи прочь!",1);
                social_vict("frown",0);
            }
            done();
        };
        cleanup = function() {
            thread.stop();
            mob.talktask = null;
		};
		wait = function(seconds, mob, ch) {
            .scheduler.sleep(seconds * 4);
            if (mob.dead || ch.dead)
                throw "sleep: someone is dead";
            if (mob.in_room != ch.in_room)
                throw "sleep: ch left the room";
        };
        say = function(msg, pause) {
			.tmp.quest.say(msg, mob, ch);
			wait(pause, mob, ch);
		};
        tell = function(msg, pause) {
			.tmp.quest.tell(msg, mob, ch);
			wait(pause, mob, ch);
		};
        social_vict = function(social, pause) {
            mob.interpret_cmd(social, ch.name);
			wait(pause, mob, ch);
        };
        done = function() {
            debug("done...");
            mob.talktask=null;
            mob.in_room.ppl.forEach(function(ch){
                if(this.is_npc() && this.spec_fun=="spec_guard") {
                    if(this.talkativeArray==null)
                        this.talkativeArray = .Array();
                    this.talkativeArray[ch.name] = .current_time;
                }
            },ch);
        };
        debug = function(str) {
            if(.buildplot) {
                var vict;
                vict = .get_char_world("Zaleshanin");
                if(vict==null) vict = .get_char_world("Miyamoto");
                if(vict!=null) vict.act("citiguards debug: "+str);
            }
        };
        
        return this;
    };

    isSpecMob = function (ch) {

        if (!ch.is_npc()) 
            return false;

        if (ch.hasOccupation("shopper") || ch.hasOccupation("practicer")
            || ch.hasOccupation("repairman") || ch.hasOccupation("quest_trader")
            || ch.hasOccupation("healer") || ch.hasOccupation("smithman")
            || ch.hasOccupation("trainer") || ch.hasOccupation("trainer")
            || (ch.spec_fun != null && (ch.spec_fun == "spec_guard"
                || ch.spec_fun == "spec_patrolman" || ch.spec_fun == "spec_executioner" 
                || ch.spec_fun == "spec_mayor" || ch.spec_fun == "spec_captain"))) {
            return true;
        }
        return false;
    };

    SpecGuardOnSpec = function(mob) {
        this = .tmp.cityguards;
        //очарован
        if(mob.charmed) return false;
        //не хоумтаун
        if(!(mob.in_room.area.area_flag&.tables.area_flags.hometown)) return false;
        //в отключке
        if(mob.position < .tables.position_table.rest) return false;
        //дерусь
        if(mob.fighting!=null) return false;
        //никого нет
        if(mob.in_room.ppl.size()<=1) return false;

        var ppl, victim, msg;
        ppl = .List(); //список с кем поговорить
        victim = null; //если нашли кого бить!
        crime = ''; //чем провинился

        for (ch in mob.in_room.ppl) {
            //с этими не связываюсь
            if(ch.is_npc() || ch.is_immortal()) continue;
            //этого не вижу
            if(!mob.can_see_mob(ch)) continue;
            
            if(.isset_bit(ch.act, .tables.plr_flags.wanted) || ch.isAffected("jail")) {
                victim = ch;
                crime = ', ПРЕСТУПНИК';
                break;
            }
            if(ch.fighting!=null) {
                if(ch.fighting.getClan()=="RULER" //с рулерами драться не надо
                    || ch.getClan()=="CHAOS" // хаоситам драться не надо
                    || (!ch.is_npc() && ch.clan.diplomacy(.Clan("ruler")) == "war") //врагам рулеров не драться
                    || ch.fighting.isAffected("manacles") // закованных в кандалы не бить
                    || (!ch.fighting.is_npc() && ch.hometown.areaname!=mob.in_room.areaname 
                        && mob.in_room.areaname==ch.fighting.hometown.areaname) //по прописке
                    || (ch.alignName!=mob.alignName 
                        && mob.alignName==ch.fighting.alignName) //по алигну
                    || isSpecMob(ch.fighting) //спецмобу
                ) {
                    victim = ch;
                    break;
                } else {
                    //чтоб  не пылиться, помогу кому-нибудь, если не найду кого получше
                    victim = .List().add(ch, ch.fighting).random();
                }
                
            }

            //с одним и тем же разговариваем не чаще чем раз в 8 часов
            if(mob.talkativeArray!=null && mob.talkativeArray[ch.name]!=null 
                && .current_time - mob.talkativeArray[ch.name] < 60*60*8) continue;
            
            ppl.push_back(ch);
        }

        if(crime!='') {
            //TODO перенести в onGreet
            mob.setClan("RULER");
            mob.interpret_raw("cb", .fmt("ВНИМАНИЕ!!! %1$^C1 находится в месте под названием %2$s в районе %3$s.", victim, victim.in_room.name, victim.in_room.areaname));
        }
        if(victim!=null) {
            if(!mob.is_safe(victim) //если не защищают боги
                && ((mob.getModifyLevel()+8 > victim.getModifyLevel()) //совладаем по уровню
                    || (victim.fighting!=null && victim.fighting!=mob)) //или кому-то помогаем
                ) {
                mob.interpret_raw("yell", .fmt("%1$^C1%2$s! ЗАЩИЩАЙ НЕВИННЫХ!! СМЕРТЬ ПРЕСТУПНИКАМ!!", victim, crime));
                mob.multi_hit(victim);
            } else {
                mob.recho("%1$^C1 кричит '%2$^C1! ТЫ ЕЩЕ ОТВЕТИШЬ ЗА СВОИ ПРЕСТУПЛЕНИЯ!'",mob, victim);
            }
            return true;
        }

        //уже раговариваю
        if(mob.talktask != null 
            && mob.talktask.thread!=null 
            && mob.talktask.thread.running)
            return false;

        //не с кем разговаривать
        if(ppl.size()==0)
            return false;
        //не свезло
        if(.number_percent()%42 != 0)
            return false; 

        mob.talktask = .tmp.cityguards.TalkTask(mob, ppl.random());
        mob.talktask.thread.start();
    };

    Init = function(initiator) {
        var result_list;
        result_list = .Array();
    
        
        for( mob = .char_list; mob != null; mob = mob.next ) {
            if(!mob.is_npc()) continue;
            if(mob.spec_fun==null || mob.spec_fun!="spec_guard") continue;
    
            if(result_list[mob.in_room.areaname]==null) {
                result_list[mob.in_room.areaname]=.List();
            }
            if(result_list[mob.in_room.areaname].has(mob.pIndexData.vnum)) continue;
            result_list[mob.in_room.areaname].push_back(mob.pIndexData.vnum);
        }
    
        var index, mob;
        initiator.act("Activating talkative cityguards:");
        for(areaname in result_list.keys) {
            initiator.act("  "+areaname+":");
            for(vnum in result_list[areaname]) {
                index = .get_mob_index(vnum);
                index.onSpec = function(mob) {
                    .tmp.cityguards.SpecGuardOnSpec(mob);
                };

                mob = index.instances.at(0);
                initiator.act("    [%d] %s",vnum,mob.name);
            }
        }
    
    };

    Init(initiator);

    /* .get_mob_index(3060).onSpec = function(mob) {.tmp.cityguards.OnSpecTalkative(mob);}; */
    
    
    /* %C1, отдавая воинские почести, салютет $O1. 
    %C1 выкидывает %O1 из ножен, салютуя.*/
}, this, .List())
