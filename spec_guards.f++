.apply(function(){
    //проверка наличия используемых функций
    if(.tmp.quest==null 
        || .tmp.quest.sleep==null
        || .tmp.quest.say==null
        || .tmp.quest.tell==null)
        throw(".tmp.quest functions not found!!!");

    if(.tmp.cityguards == null)
        .tmp.cityguards = .Map();

    this = .tmp.cityguards;

    TalkTask = function(mob, ch) {
        this = .Map();

        this.mob = mob;
		this.ch = ch;
		
		thread = .scheduler.Thread(function(this) {
			try {
                run();
			} catch (e) {
                if(e == "sleep: ch left the room" || e == "sleep: someone is dead") {
                    // персонаж ушел, или кто-то скончался - это норма!
                    .print("cityguard.TalkTask normal: " + e);
                } else {
                    .print("cityguard.TalkTask: " + e);
                }
                debug(e);
			}
			//cleanup();
		}, this);
        run = function() {
            say("Я Вас знаю?",1);
            if(ch.hometown.areaname==mob.in_room.areaname) {
                say("Ну ладно, мой друг. Я попытаюсь вспомнить.",1);
                social_vict("smile",0);
            } else {
                say("Я не знаю тебя. Уходи прочь!",1);
                social_vict("frown",0);
            }
            done();
        };
        cleanup = function() {
			mob = null;
			ch = null;
			thread = null;
		};
		wait = function(seconds, mob, ch) {
            .scheduler.sleep(seconds * 4);
            if (mob.dead || ch.dead)
                throw "sleep: someone is dead";
            if (mob.in_room != ch.in_room)
                throw "sleep: ch left the room";
        };
        say = function(msg, pause) {
			.tmp.quest.say(msg, mob, ch);
			wait(pause, mob, ch);
		};
        tell = function(msg, pause) {
			.tmp.quest.tell(msg, mob, ch);
			wait(pause, mob, ch);
		};
        social_vict = function(social, pause) {
            mob.interpret_cmd(social, ch.name);
			wait(pause, mob, ch);
        };
        done = function() {
            debug("done...");
            mob.talktask=null;
            //записывать оповещенных, чтоб не спамить лишний раз
        };
        debug = function(str) {
            if(.buildplot) {
                var vict;
                vict = .get_char_world("Zaleshanin");
                if(vict==null) vict = .get_char_world("Miyamoto");
                if(vict!=null) vict.act("citiguards debug: "+str);
            }
        };
        
        return this;
    };

    OnSpec = function(mob) {
        this = .tmp.cityguards;
        //не хоумтаун
        if(!(mob.in_room.area.area_flag&.tables.area_flags.hometown))
            return false;
        //в отключке
        if(mob.position < .tables.position_table.rest)
            return false;
        //дерусь
        if(mob.fighting!=null)
            return false;
        //никого нет
        if(mob.in_room.ppl.size()<=1)
            return false;
        //уже раговариваю
        if(mob.talktask != null 
            && mob.talktask.thread!=null 
            && mob.talktask.thread.running)
            return false;

        var ppl;
        ppl = .List();

        for (ch in mob.in_room.ppl) {
            //с этими не разговариваю
            if(ch.is_npc() || ch.is_immortal()) continue;
            
            ppl.push_back(ch);
        }
        //не с кем разговаривать
        if(ppl.size()==0)
            return false;
        //не свезло
        /* if(.number_percent()<50)
            return false; */

        mob.talktask = .tmp.cityguards.TalkTask(mob, ppl.random());
        mob.talktask.thread.start();
    };


    .get_mob_index(601).onSpec = function(mob) {
        .tmp.cityguards.OnSpec(mob);
    };
    
    
    /* $C1, отдавая воинские почести, салютет $O1. 
    $C1 выкинул $O1 из ножен, салютуя.*/
})